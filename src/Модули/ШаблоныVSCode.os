///////////////////////////////////////////////////////////////////
//
// Методы работы с шаблонами VS Code
//
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////

// Некоторые описание шаблонов VS code https://github.com/1c-syntax/vsc-language-1c-bsl/wiki/Динамические-шаблоны

///////////////////////////////////////////////////////////////////
// Программный интерфейс
///////////////////////////////////////////////////////////////////

// Считывает шаблон кода в структуру
//
// Параметры:
//   ИмяФайлаШаблона - Строка - Имя файла шаблона
//   РазбиратьБлокиПодстановки - Булево - Выполнять ли разбор текста шаблона
//		Если выполняется объединение/разделение без изменения типа шаблона, то рекомендуется не выполнять анализ текста шаблона
//
//  Возвращаемое значение:
//   Структура - Данные шаблона
//		Тип - ТИп узла шаблона
//		Наименование - имя узла
//		Значения - подчиненные узлы
//
Функция ПрочитатьШаблон(ИмяФайла, РазбиратьБлокиПодстановки = Истина) Экспорт
	
	ВызватьИсключение "Метод не поддерживается";
	
КонецФункции

// Сохраняет шаблон в файл
//
// Параметры:
//   Шаблон - Структура - Данные шаблона
//   ИмяФайла - Строка - Имя файла шаблона
//
Процедура ЗаписатьШаблон(Шаблон, ИмяФайла) Экспорт
	
	ВставлятьИдентификаторЯзыка = (Новый Файл(ИмяФайла)).Расширение = ".code-snippets";

	ДанныеДляЗаписи = СформироватьОбъектШаблона(Шаблон, ВставлятьИдентификаторЯзыка);
	
	Запись = Новый ЗаписьJSON();
	Запись.ОткрытьФайл(ИмяФайла);
	
	ЗаписатьJSON(Запись, ДанныеДляЗаписи);
	
	Запись.Закрыть();

КонецПроцедуры

// Возвращает список поддерживаемых типов блоков подстановки
//
//  Возвращаемое значение:
//   Массив - Массив строка, элементов перечисления ТипПодстановки
//
Функция ДоступныеТипыПодстановок() Экспорт

	ДоступныеТипыПодстановок =  Новый Массив();
	
	ДоступныеТипыПодстановок.Добавить(ТипПодстановки.УстановкаКурсора);
	ДоступныеТипыПодстановок.Добавить(ТипПодстановки.ВыборВарианта);
	ДоступныеТипыПодстановок.Добавить(ТипПодстановки.ДатаВремя);
	
	Возврат ДоступныеТипыПодстановок;

КонецФункции

///////////////////////////////////////////////////////////////////
// Служебный функционал
///////////////////////////////////////////////////////////////////

Функция СформироватьОбъектШаблона(Шаблон, ВставлятьИдентификаторЯзыка, ШаблонVSCode = Неопределено)
	
	Если ШаблонVSCode = Неопределено Тогда
		
		ШаблонVSCode = Новый Соответствие();
		
	КонецЕсли;

	Для Каждого Элемент Из Шаблон.Элементы Цикл
		
		Если Элемент.Тип = "Группа" Тогда
			
			СформироватьОбъектШаблона(Элемент, ВставлятьИдентификаторЯзыка, ШаблонVSCode);
			Продолжить;
			
		КонецЕсли;
		
		ЭлементШаблона = Новый Структура();
		ЭлементШаблона.Вставить("prefix", Элемент.ТекстЗамены);
		ЭлементШаблона.Вставить("body", СобратьТекстШаблона(Элемент.Шаблон));
		ЭлементШаблона.Вставить("description", Элемент.Наименование);
		
		Если ВставлятьИдентификаторЯзыка Тогда
			
			ЭлементШаблона.Вставить("scope", "bsl");
			
		КонецЕсли;

		ШаблонVSCode.Вставить(Элемент.Наименование, ЭлементШаблона);
		
	КонецЦикла;

	Возврат ШаблонVSCode;

КонецФункции

Функция СобратьТекстШаблона(ДанныеШаблона)
	
	Параметры = Новый Структура("Номер", 1);

	Вывод = Новый ЗаписьJSON();
	Вывод.УстановитьСтроку();
	
	Для Каждого Элемент Из ДанныеШаблона Цикл
		
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			
			Вывод.ЗаписатьБезОбработки(Элемент);
			Продолжить;
			
		ИначеЕсли Элемент.Тип = ТипПодстановки.УстановкаКурсора Тогда
			
			Если Элемент.Свойство("Подсказка") Тогда
				
				Вывод.ЗаписатьБезОбработки(СтрШаблон("${%1:%2}", Параметры.Номер, ОбработатьКавычки(Элемент.Подсказка)));
				
			Иначе
				
				Вывод.ЗаписатьБезОбработки(СтрШаблон("$%1", Параметры.Номер));

			КонецЕсли;

		ИначеЕсли Элемент.Тип = ТипПодстановки.ВыборВарианта Тогда
			
			Вывод.ЗаписатьБезОбработки(СтрШаблон("${%1|", Параметры.Номер));

			Первый = Истина;
			Для Каждого ЭлементВыбора Из Элемент.СписокВыбора Цикл
				
				Если Первый Тогда
					Вывод.ЗаписатьБезОбработки(ОбработатьКавычки(ЭлементВыбора.Значение));
					Первый = Ложь;
				Иначе
					Вывод.ЗаписатьБезОбработки("," + ОбработатьКавычки(ЭлементВыбора.Значение));
				КонецЕсли;

			КонецЦикла;
			
			Вывод.ЗаписатьБезОбработки("|}");
			
		ИначеЕсли Элемент.Тип = ТипПодстановки.ДатаВремя Тогда

			Вывод.ЗаписатьБезОбработки(ВыводТекущейДаты(Элемент.Формат));

		КонецЕсли;
		
		Параметры.Номер = Параметры.Номер + 1;
		
	КонецЦикла;
	
	Возврат Вывод.Закрыть();

КонецФункции

Функция ОбработатьКавычки(Знач Текст)
	
	Текст = СтрЗаменить(Текст, "\""", """");
	
	Если Лев(Текст, 1) = """" Тогда
		
		Текст = Сред(Текст, 2, СтрДлина(Текст) - 1);
		
	КонецЕсли;
	
	Если Прав(Текст, 1) = """" Тогда
		
		Текст = Сред(Текст, 1, СтрДлина(Текст) - 1);
		
	КонецЕсли;
	
	Возврат Текст;

КонецФункции

Функция ВыводТекущейДаты(Формат)
	
	Результат = Формат;
	Замены = Новый СписокЗначений();
	Замены.Добавить("dd", "CURRENT_DATE");
	Замены.Добавить("MM", "CURRENT_MONTH");
	Замены.Добавить("yyyy", "CURRENT_YEAR");
	Замены.Добавить("yyy", "CURRENT_YEAR");
	Замены.Добавить("yy", "CURRENT_YEAR_SHORT");
	
	Для Каждого Элемент Из Замены Цикл
		
		Результат = СтрЗаменить(Результат, Элемент.Значение, "$" + Элемент.Представление);

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции