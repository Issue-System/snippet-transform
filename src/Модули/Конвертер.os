///////////////////////////////////////////////////////////////////
//
// Методы конвертации шаблонов кода
//
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
// Программный интерфейс
///////////////////////////////////////////////////////////////////

// Метод преобразования формата шаблона
//
// Параметры:
//   ИмяВходногоФайла - Строка - Имя файла базового шаблона
//   ИмяВыходногоФайла - Строка - Имя файла нового шаблона
//
Процедура ПреобразоватьШаблон(ИмяВходногоФайла, ИмяВыходногоФайла) Экспорт
	
	МодульЧтение = ПолучитьМодульРаботыСШаблоном(ИмяВходногоФайла);
	
	ДанныеШаблона = МодульЧтение.ПрочитатьШаблон(ИмяВходногоФайла);

	ЗаписатьСПроверкойДоступныхТипов(ДанныеШаблона, ИмяВыходногоФайла);

КонецПроцедуры

// Метода объединения нескольких шаблонов в один
//
// Параметры:
//   МассивВходныхФайлов - Массив - Массив файлов (тип:Файл) шаблонов, которые необходимо объединить
//   ИмяВыходногоФайла - Строка - Имя файла нового шаблона
//
Процедура СоединитьШаблоны(МассивВходныхФайлов, ИмяВыходногоФайла) Экспорт
	
	Лог = МенеджерПриложения.ПолучитьЛог();

	Читатели = Новый Соответствие();
	
	Шаблон = Неопределено;

	Для Каждого Файл Из МассивВходныхФайлов Цикл
		
		Если НЕ Файл.ЭтоФайл() Тогда
			
			Продолжить;
			
		КонецЕсли;

		Если Читатели[Файл.Расширение] = Неопределено Тогда
			
			Читатель = ПолучитьМодульРаботыСШаблоном(Файл.ПолноеИмя);
			
			Если Читатель = Неопределено Тогда
				
				Лог.Предупреждение("Формат шаблона не поддерживается. Файл пропущен %1", Файл.Имя);
				Продолжить;

			КонецЕсли;

			Читатели.Вставить(Файл.Расширение, Читатель);
			
		КонецЕсли;
		
		ШаблонФайла = Читатели[Файл.Расширение].ПрочитатьШаблон(Файл.ПолноеИмя);
		
		Если Шаблон = Неопределено Тогда // Первый шаблон будет основным, необходимо для сохранения имени шаблона конфигуратора, при объединении двух шаблонов
			
			Шаблон = ШаблонФайла;
			
		Иначе

			Для Каждого Элемент Из ШаблонФайла.Элементы Цикл // Последующие шаблоны будут закидываться в основной
		
				Шаблон.Элементы.Добавить(Элемент);
				
			КонецЦикла;

		КонецЕсли;
		
	КонецЦикла;

	ЗаписатьСПроверкойДоступныхТипов(Шаблон, ИмяВыходногоФайла);

КонецПроцедуры

// Метод для переноса части элементов шаблона в отдельный файл
// Анализ необходимости переноса выполняется по полному наименованию(включая иерархию) 
// на соответствие регулярному выражению
//
// Параметры:
//   ИзменяемыйШаблон - Строку - Имя файла анализируемого шаблона
//   ШаблонНаименования - Строка - Шаблон регулярного для проверки наименования элемента
//   РежимОбработкиНаименования - Строка - Способ обработки элементов
//		* equal - совпадающий элемент переносится в новый файл
//		* notequal - не совпадающий элемент переносится в новый файл
//   УдаляемыеДанныеПоложитьВ - Строка - Имя файла, в который происходит перенос
//
Процедура РазделитьШаблон(ИзменяемыйШаблон, ШаблонНаименования, ПереносПриНеСовпадении, УдаляемыеДанныеПоложитьВ = Неопределено) Экспорт
	
	Модуль = ПолучитьМодульРаботыСШаблоном(ИзменяемыйШаблон);
	Шаблон = Модуль.ПрочитатьШаблон(ИзменяемыйШаблон);
	
	НовыйШаблон = ШаблоныБазовый.КорневойЭлемент();
	РегулярноеВыражение = Новый РегулярноеВыражение(ШаблонНаименования);
	
	РазделитьШаблонПоРегулярномуВыражению(Шаблон, РегулярноеВыражение, НовыйШаблон, НЕ ПереносПриНеСовпадении, "");
	
	Модуль.ЗаписатьШаблон(Шаблон, ИзменяемыйШаблон);
	
	Если УдаляемыеДанныеПоложитьВ <> Неопределено Тогда
		
		ЗаписатьСПроверкойДоступныхТипов(НовыйШаблон, УдаляемыеДанныеПоложитьВ);
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////
// Программный интерфейс
///////////////////////////////////////////////////////////////////

Процедура ЗаписатьСПроверкойДоступныхТипов(Шаблон, ИмяФайла, МодульЗаписи = Неопределено)

	Если МодульЗаписи = Неопределено Тогда
		
		МодульЗаписи = ПолучитьМодульРаботыСШаблоном(ИмяФайла);

	КонецЕсли;

	ДоступныеТипыПодстановок = МодульЗаписи.ДоступныеТипыПодстановок();
	ФлагиТипов = Утилиты.СоответствиеФлагов(ДоступныеТипыПодстановок);
	УдалитьНедоступныеШаблоны(Шаблон, ФлагиТипов);

	МодульЗаписи.ЗаписатьШаблон(Шаблон, ИмяФайла);

КонецПроцедуры

Процедура УдалитьНедоступныеШаблоны(ДанныеШаблона, ДоступныеТипыПодстановок)
	
	Лог = МенеджерПриложения.ПолучитьЛог();

	Количество = ДанныеШаблона.Элементы.Количество();

	Для Инд = 1 По Количество Цикл

		Элемент = ДанныеШаблона.Элементы[Количество - Инд];
		
		Если Элемент.Тип = "Элемент" Тогда
			
			Для Каждого ЭлементШаблона Из Элемент.Шаблон Цикл
				
				Если ТипЗнч(ЭлементШаблона) = Тип("Структура") И ДоступныеТипыПодстановок[ЭлементШаблона.Тип] = Неопределено Тогда
					
					Лог.Предупреждение("Шаблон замены ""%1"" пропущен, так имеет неподдерживаемый тип ""%2""", Элемент.Наименование, ЭлементШаблона.Тип);
					ДанныеШаблона.Элементы.Удалить(Количество - Инд);
					Прервать;

				КонецЕсли;

			КонецЦикла;

		ИначеЕсли Элемент.Тип = "Группа" Тогда
			
			УдалитьНедоступныеШаблоны(Элемент, ДоступныеТипыПодстановок);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьМодульРаботыСШаблоном(ИмяФайла)
	
	РасширениеФайла = (Новый Файл(ИмяФайла)).Расширение;
	
	Если РасширениеФайла = ".st" Тогда
		
		Возврат ШаблоныКонфигуратора;

	ИначеЕсли РасширениеФайла = ".json" ИЛИ РасширениеФайла = ".code-snippets" Тогда
		
		Возврат ШаблоныVSCode;

	ИначеЕсли РасширениеФайла = ".xml" Тогда
		
		Возврат ШаблоныEDT;
		
	Иначе
		
		МенеджерПриложения.ПолучитьЛог().Ошибка("Не поддерживаемый формат файла: %1" + РасширениеФайла);		
		
	КонецЕсли;
	
КонецФункции

Функция РазделитьШаблонПоРегулярномуВыражению(Шаблон, РегулярноеВыражение, НовыйШаблон, ПереносПриСовпадении, ПрефиксИмени)
	
	КУдалению = Новый Массив();
	Лог = МенеджерПриложения.ПолучитьЛог();

	Для Каждого Элемент Из Шаблон.Элементы Цикл
		
		Наименование = ПрефиксИмени + ?(Элемент.Тип = "Группа", Элемент.Наименование + ".", Элемент.Наименование);
		НаименованиеСовпадаетСШаблоном = РегулярноеВыражение.Совпадает(Наименование);
		
		Если (ПереносПриСовпадении И НаименованиеСовпадаетСШаблоном) ИЛИ (НЕ ПереносПриСовпадении И НЕ НаименованиеСовпадаетСШаблоном) Тогда
			
			НовыйШаблон.Элементы.Добавить(Элемент);
			КУдалению.Добавить(Элемент);
			Лог.Информация("Элемент шаблона ""%1%2"" перенесен в другой файл", ПрефиксИмени, Элемент.Наименование)
			
		ИначеЕсли Элемент.Тип = "Группа" Тогда
			
			НоваяГруппа = ШаблоныБазовый.Группа();
			
			Если РазделитьШаблонПоРегулярномуВыражению(Элемент, РегулярноеВыражение, НоваяГруппа, ПереносПриСовпадении, Наименование) Тогда
				
				НовыйШаблон.Элементы.Добавить(НоваяГруппа);
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из КУдалению Цикл
		
		Шаблон.Элементы.Удалить(Шаблон.Элементы.Найти(Элемент));

	КонецЦикла;
	
	Возврат КУдалению.Количество();

КонецФункции
