///////////////////////////////////////////////////////////////////
//
// Методы работы с шаблонами EDT
//
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
// Программный интерфейс
///////////////////////////////////////////////////////////////////

// Считывает шаблон кода в структуру
//
// Параметры:
//   ИмяФайлаШаблона - Строка - Имя файла шаблона
//   РазбиратьБлокиПодстановки - Булево - Выполнять ли разбор текста шаблона
//		Если выполняется объединение/разделение без изменения типа шаблона, то рекомендуется не выполнять анализ текста шаблона
//
//  Возвращаемое значение:
//   Структура - Данные шаблона
//		Тип - ТИп узла шаблона
//		Наименование - имя узла
//		Значения - подчиненные узлы
//
Функция ПрочитатьШаблон(ИмяФайлаШаблона, РазбиратьБлокиПодстановки = Истина) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ИмяФайлаШаблона);
	
	ДанныеШаблона = ШаблоныБазовый.КорневойЭлемент();

	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.Имя = "template" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Чтение.ЗначениеАтрибута("deleted") <> "false" ИЛИ Чтение.ЗначениеАтрибута("enabled") <> "true" Тогда

				Продолжить;
				
			КонецЕсли;
			
			Элемент = ШаблоныБазовый.Элемент();
			Элемент.Наименование = Чтение.ЗначениеАтрибута("description");
			Элемент.ТекстЗамены = Чтение.ЗначениеАтрибута("name");
			Элемент.Наименование = Чтение.ЗначениеАтрибута("description");
			
			Чтение.Прочитать();
			
			Если РазбиратьБлокиПодстановки Тогда
				Элемент.Шаблон = ПрочитатьСтруктуруТекстаШаблона(Чтение.Значение, 1, Ложь);
			Иначе
				Элемент.Шаблон = Чтение.Значение;
			КонецЕсли;

			ДанныеШаблона.Элементы.Добавить(Элемент);

		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Возврат ДанныеШаблона;

КонецФункции

// Сохраняет шаблон в файл
//
// Параметры:
//   Шаблон - Структура - Данные шаблона
//   ИмяФайла - Строка - Имя файла шаблона
//
Процедура ЗаписатьШаблон(Шаблон, ИмяФайла) Экспорт
	
	Запись = Новый ЗаписьXML();
	Запись.ОткрытьФайл(ИмяФайла);
	
	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("templates");

	РекурсивнаяЗаписьДереваШаблонов(Шаблон, Запись);
	Запись.ЗаписатьКонецЭлемента();
	Запись.Закрыть();

КонецПроцедуры

// Возвращает список поддерживаемых типов блоков подстановки
//
//  Возвращаемое значение:
//   Массив - Массив строка, элементов перечисления ТипПодстановки
//
Функция ДоступныеТипыПодстановок() Экспорт

	ДоступныеТипыПодстановок =  Новый Массив();
	
	ДоступныеТипыПодстановок.Добавить(ТипПодстановки.УстановкаКурсора);
	ДоступныеТипыПодстановок.Добавить(ТипПодстановки.ДатаВремя);
	
	Возврат ДоступныеТипыПодстановок;

КонецФункции

///////////////////////////////////////////////////////////////////
// Служебный функционал
///////////////////////////////////////////////////////////////////

// Чтение

Функция ПрочитатьСтруктуруТекстаШаблона(Текст, Позиция, ЧитаемВложенныйЭлемент = Ложь)

	ПараметрыЧтения = Новый Структура();
	ПараметрыЧтения.Вставить("КавычкаОткрыта", Ложь);
	ПараметрыЧтения.Вставить("БлокЗамены", ЧитаемВложенныйЭлемент);
	ПредыдущийСимвол = "";

	ТекущаяСтрока = "";

	Данные = Новый Массив();

	ДлиннаСтроки = СтрДлина(Текст);

	Пока Позиция <= ДлиннаСтроки Цикл

		Символ = Сред(Текст, Позиция, 1);
		Позиция = Позиция + 1;

		Если Символ = Неопределено Тогда
			Прервать;
		КонецЕсли;

		СимволОбработан = Ложь;

		Если Символ = "{" И ПредыдущийСимвол = "$" Тогда

			ТекущаяСтрока = Лев(ТекущаяСтрока, СтрДлина(ТекущаяСтрока) - 1);
			Данные.Добавить(?(ПараметрыЧтения.БлокЗамены, СокрЛП(ТекущаяСтрока), ТекущаяСтрока));
			ТекущаяСтрока = "";

			СимволОбработан = Истина;
			ВложенныйЭлемент = ПрочитатьСтруктуруТекстаШаблона(Текст, Позиция, Истина);
			Данные.Добавить(ВложенныйЭлемент);

		ИначеЕсли Символ = "}" И ПараметрыЧтения.БлокЗамены Тогда

			Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
				Данные.Добавить(?(ПараметрыЧтения.БлокЗамены, СокрЛП(ТекущаяСтрока), ТекущаяСтрока));
			КонецЕсли;

			СимволОбработан = Истина;
			ПараметрыУправляющейКонструкции1с = ПрочитатьПараметрыПодстановки(Данные);
			Возврат ПараметрыУправляющейКонструкции1с;

		ИначеЕсли Символ = "," И ПараметрыЧтения.БлокЗамены И НЕ ПараметрыЧтения.КавычкаОткрыта Тогда

			Данные.Добавить(?(ПараметрыЧтения.БлокЗамены, СокрЛП(ТекущаяСтрока), ТекущаяСтрока));
			ТекущаяСтрока = "";
			СимволОбработан = Истина;

		ИначеЕсли Символ = """" И ПредыдущийСимвол <> "\" Тогда

			ПараметрыЧтения.КавычкаОткрыта = НЕ ПараметрыЧтения.КавычкаОткрыта;

		КонецЕсли;

		Если Не СимволОбработан Тогда

			ТекущаяСтрока = ТекущаяСтрока + Символ;

		КонецЕсли;

		ПредыдущийСимвол = Символ;

	КонецЦикла;

	Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
		Данные.Добавить(?(ПараметрыЧтения.БлокЗамены, СокрЛП(ТекущаяСтрока), ТекущаяСтрока));
	КонецЕсли;

	Возврат Данные;

КонецФункции

Функция ПрочитатьПараметрыПодстановки(Данные) 
	
	Параметры = Новый Структура("Тип", ТипПодстановки.Неизвестный);
	
	Если Данные.Количество() = 0 Тогда
		
		Возврат Параметры;

	КонецЕсли;
	
	ИмяТип = Данные[0];
	
	СоответствиеТипов = Новый Соответствие();
	СоответствиеТипов.Вставить("date", ТипПодстановки.ДатаВремя);
	
	Если СтрНайти(ИмяТип, ":") Тогда
		
		Слова = Утилиты.ПолучитьСлова(ИмяТип, Истина);
		
		Имя = Слова[0].Слово;
		Тип = Слова[1].Слово;

		Если СоответствиеТипов[Тип] <> Неопределено Тогда
			Тип = СоответствиеТипов[Тип];
		КонецЕсли;
		
		Параметры.Тип = Тип;
		Параметры.Вставить("Подсказка", Имя);

		Аргументы = Сред(ИмяТип, Слова[1].Окончание + 1);

	Иначе
		
		Тип = СоответствиеТипов[ИмяТип];

		Если Тип = Неопределено Тогда
			
			Параметры.Тип = ТипПодстановки.УстановкаКурсора;
			Параметры.Вставить("Подсказка", ИмяТип);
			
		Иначе
			
			Параметры.Тип = Тип;
			
		КонецЕсли;

		Аргументы = "";
		
	КонецЕсли;
	
	Если Параметры.Тип = ТипПодстановки.ДатаВремя Тогда
		
		Параметры.Вставить("Формат", Утилиты.УдалитьСимволыВНачалеИКонце(Аргументы, "()"));

	КонецЕсли;

	Возврат Параметры;

КонецФункции

// Запись

Процедура РекурсивнаяЗаписьДереваШаблонов(Шаблон, Запись)

	Для Каждого Элемент Из Шаблон.Элементы Цикл
		
		Если Элемент.Тип = "Группа" Тогда
			
			РекурсивнаяЗаписьДереваШаблонов(Элемент, Запись);
			Продолжить;
			
		КонецЕсли;
		
		Запись.ЗаписатьНачалоЭлемента("template");
		Запись.ЗаписатьАтрибут("autoinsert", "true");
		Запись.ЗаписатьАтрибут("context", "com._1c.g5.v8.dt.bsl.Bsl.AddHandlerStatement");
		Запись.ЗаписатьАтрибут("deleted", "false");
		Запись.ЗаписатьАтрибут("description", Элемент.Наименование);
		Запись.ЗаписатьАтрибут("enabled", "true");
		Запись.ЗаписатьАтрибут("name", Элемент.ТекстЗамены);
		Запись.ЗаписатьТекст(СобратьТекстШаблона(Элемент.Шаблон));
		
		Запись.ЗаписатьКонецЭлемента();
		
	КонецЦикла;

КонецПроцедуры

Функция СобратьТекстШаблона(ДанныеШаблона)
	
	Если ТипЗнч(ДанныеШаблона) = Тип("Строка") Тогда
		
		Возврат ДанныеШаблона;
		
	КонецЕсли;

	Вывод = Новый ЗаписьJSON();
	Вывод.УстановитьСтроку();
	НомерЭлемента  = 1;

	Для Каждого Элемент Из ДанныеШаблона Цикл
		
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			
			Вывод.ЗаписатьБезОбработки(Элемент);
			Продолжить;
			
		ИначеЕсли Элемент.Тип = ТипПодстановки.УстановкаКурсора Тогда
			
			Если Элемент.Свойство("Подсказка") Тогда
				
				Вывод.ЗаписатьБезОбработки(СтрШаблон("${%1}", Утилиты.СформироватьИдентификатор(Элемент.Подсказка)));

			Иначе
				
				Вывод.ЗаписатьБезОбработки("${cursor}");

			КонецЕсли;
			
		ИначеЕсли Элемент.Тип = ТипПодстановки.ДатаВремя Тогда
			
			Если Элемент.Свойство("Подсказка") Тогда
				
				Вывод.ЗаписатьБезОбработки(СтрШаблон("${%1:date(%2)}", Утилиты.СформироватьИдентификатор(Элемент.Подсказка), Элемент.Формат));

			Иначе
				
				Вывод.ЗаписатьБезОбработки(СтрШаблон("${n%1:date(%2)}", НомерЭлемента, Элемент.Формат));

			КонецЕсли;
			
		КонецЕсли;
		
		НомерЭлемента = НомерЭлемента + 1;

	КонецЦикла;
	
	Возврат Вывод.Закрыть();
	
КонецФункции
