///////////////////////////////////////////////////////////////////
//
// Методы работы с шаблонами конфигуратора
//
// (с) BIA Technologies, LLC
//
///////////////////////////////////////////////////////////////////

#Использовать strings

///////////////////////////////////////////////////////////////////
// Программный интерфейс
///////////////////////////////////////////////////////////////////

// Считывает шаблон кода в структуру
//
// Параметры:
//   ИмяФайлаШаблона - Строка - Имя файла шаблона
//   РазбиратьБлокиПодстановки - Булево - Выполнять ли разбор текста шаблона
//		Если выполняется объединение/разделение без изменения типа шаблона, то рекомендуется не выполнять анализ текста шаблона
//
//  Возвращаемое значение:
//   Структура - Данные шаблона
//		Тип - ТИп узла шаблона
//		Наименование - имя узла
//		Значения - подчиненные узлы
//
Функция ПрочитатьШаблон(ИмяФайлаШаблона, РазбиратьБлокиПодстановки = Истина) Экспорт

	Читатель = Новый ЧтениеВнутреннийФормат1С();
	Дерево = Читатель.ПрочитатьФайл(ИмяФайлаШаблона);

	КорневойЭлемент = ШаблоныБазовый.КорневойЭлемент();
	ПрочитатьУзелШаблона(Дерево.Значения[0], КорневойЭлемент, РазбиратьБлокиПодстановки);

	Возврат КорневойЭлемент.Элементы[0];

КонецФункции

// Сохраняет шаблон в файл
//
// Параметры:
//   Шаблон - Структура - Данные шаблона
//   ИмяФайла - Строка - Имя файла шаблона
//
Процедура ЗаписатьШаблон(Шаблон, ИмяФайла) Экспорт
	
	Запись = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	Запись.ЗаписатьСтроку("{1,");
	
	ЗаписатьГруппуШаблона(Шаблон, Запись);
	
	Запись.Записать(Символы.ПС + "}");

	Запись.Закрыть();

КонецПроцедуры

// Возвращает список поддерживаемых типов блоков подстановки
//
//  Возвращаемое значение:
//   Массив - Массив строка, элементов перечисления ТипПодстановки
//
Функция ДоступныеТипыПодстановок() Экспорт

	ДоступныеТипыПодстановок = ТипПодстановки.ВсеТипы();
	
	Возврат ДоступныеТипыПодстановок;

КонецФункции

///////////////////////////////////////////////////////////////////
// Служебный функционал
///////////////////////////////////////////////////////////////////

// Чтение 

Функция ПрочитатьУзелШаблона(Знач Элемент, Знач Родитель, РазбиратьБлокиПодстановки)

	КоллекцияЭлементов = Элемент.Значения;

	ЭтоКоллекция = Утилиты.ЭтоЧисло(КоллекцияЭлементов[0]);
	ЭтоГруппа = НЕ ЭтоКоллекция И КоллекцияЭлементов[1] = "1";
	ЭтоЭлемент = НЕ ЭтоКоллекция И КоллекцияЭлементов[1] = "0";

	Если ЭтоГруппа Тогда

		ОписаниеЭлемента = ШаблоныБазовый.Группа();
		ОписаниеЭлемента.Вставить("Наименование", ОбработатьКавычкиПриЧтении(КоллекцияЭлементов[0]));
		Родитель.Элементы.Добавить(ОписаниеЭлемента);

		Возврат ОписаниеЭлемента;

	ИначеЕсли ЭтоЭлемент Тогда

		ОписаниеЭлемента = ШаблоныБазовый.Элемент();
		ОписаниеЭлемента.Наименование = ОбработатьКавычкиПриЧтении(КоллекцияЭлементов[0]);
		ОписаниеЭлемента.ТекстЗамены = Утилиты.УдалитьСимволы(ОбработатьКавычкиПриЧтении(КоллекцияЭлементов[3]), "[]");
		ОписаниеЭлемента.Вставить("ТекстЗаменыБазовый", ОбработатьКавычкиПриЧтении(КоллекцияЭлементов[3]));
		
		Если РазбиратьБлокиПодстановки Тогда
			ОписаниеЭлемента.Шаблон = ПрочитатьСтруктуруТекстаШаблона(ОбработатьКавычкиПриЧтении(КоллекцияЭлементов[4]), 1);
		Иначе
			ОписаниеЭлемента.Шаблон = ОбработатьКавычкиПриЧтении(КоллекцияЭлементов[4]);
		КонецЕсли;

		Родитель.Элементы.Добавить(ОписаниеЭлемента);

		Возврат ОписаниеЭлемента;

	ИначеЕсли ЭтоКоллекция Тогда

		Для Инд = 1 По КоллекцияЭлементов.ВГраница() Цикл

			Элемент = ПрочитатьУзелШаблона(КоллекцияЭлементов[Инд], Родитель, РазбиратьБлокиПодстановки);

			Если Элемент <> Неопределено И Элемент.Тип = "Группа" Тогда

				Родитель = Элемент;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецФункции

Функция ПрочитатьСтруктуруТекстаШаблона(Текст, Позиция, ЧитаемВложенныйЭлемент = Ложь)

	ПараметрыЧтения = Новый Структура();
	ПараметрыЧтения.Вставить("КавычкаОткрыта", Ложь);
	ПараметрыЧтения.Вставить("БлокЗамены", ЧитаемВложенныйЭлемент);
	ПараметрыЧтения.Вставить("ПредыдущийСимвол", "");

	ТекущаяСтрока = "";

	ДанныеТекстаШаблона = Новый Массив();
	ДлиннаСтроки = СтрДлина(Текст);

	Пока Позиция <= ДлиннаСтроки Цикл

		Символ = Сред(Текст, Позиция, 1);

		Позиция = Позиция + 1;
		
		ПараметрыСимвола = ПолучитьПараметрыСимвола(Символ, ПараметрыЧтения);
		
		Если ПараметрыСимвола.ФиксацияТекущейСтроки.Фиксировать Тогда
			
			Если ПараметрыСимвола.ФиксацияТекущейСтроки.УдалитьПрошлыйСимвол Тогда
				
				СтроковыеФункции.УдалитьПоследнийСимволВСтроке(ТекущаяСтрока);
				
			КонецЕсли;
		
			Если НЕ ПараметрыСимвола.ФиксацияТекущейСтроки.ПроверятьЗаполненность ИЛИ ЗначениеЗаполнено(ТекущаяСтрока) Тогда
				
				ДобавитьЭлементТекстаШаблон(ДанныеТекстаШаблона, ТекущаяСтрока, ПараметрыЧтения); // Фиксируем то, что было до блока
				
			КонецЕсли;

			ТекущаяСтрока = "";
			
		КонецЕсли;
		
		Если ПараметрыСимвола.Тип = "НачалоБлокаПодстановки" Тогда

			ВложенныйЭлемент = ПрочитатьСтруктуруТекстаШаблона(Текст, Позиция, Истина);
			ДобавитьЭлементТекстаШаблон(ДанныеТекстаШаблона, ВложенныйЭлемент, ПараметрыЧтения);

		ИначеЕсли ПараметрыСимвола.Тип = "ОкончаниеБлокаПодстановки" Тогда
			
			ПараметрыПодстановки = РазобратьПараметрыПодстановки(ДанныеТекстаШаблона);
			Возврат ПараметрыПодстановки;
			
		ИначеЕсли ПараметрыСимвола.Тип = "РазделительПараметровБлока" Тогда
		
		ИначеЕсли ПараметрыСимвола.Тип = "Кавычка" Тогда
			
			ПараметрыЧтения.КавычкаОткрыта = НЕ ПараметрыЧтения.КавычкаОткрыта;
			
		ИначеЕсли НЕ ПараметрыСимвола.Тип = "Неизвестный" Тогда

			ВызватьИсключение "Неизвестный тип символа";

		КонецЕсли;

		Если ПараметрыСимвола.ЗаписатьВПоток Тогда

			ТекущаяСтрока = ТекущаяСтрока + Символ;

		КонецЕсли;

		ПараметрыЧтения.ПредыдущийСимвол = Символ;

	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда // Фиксируем последний блок текста
		
		ДобавитьЭлементТекстаШаблон(ДанныеТекстаШаблона, ТекущаяСтрока, ПараметрыЧтения);

	КонецЕсли;

	Возврат ДанныеТекстаШаблона;

КонецФункции

Функция ПолучитьПараметрыСимвола(Символ, ПараметрыЧтения)
	
	Параметры = Новый Структура("Тип, ЗаписатьВПоток", "Неизвестный", Истина);
	Параметры.Вставить("ФиксацияТекущейСтроки", Новый Структура("Фиксировать, ПроверятьЗаполненность, УдалитьПрошлыйСимвол", Ложь, Истина, Ложь));
	
	Если Символ = "?" И ПараметрыЧтения.ПредыдущийСимвол = "<" Тогда
		
		Параметры.Тип = "НачалоБлокаПодстановки";
		Параметры.ЗаписатьВПоток = Ложь;
		Параметры.ФиксацияТекущейСтроки.Фиксировать = Истина;
		Параметры.ФиксацияТекущейСтроки.УдалитьПрошлыйСимвол = Истина;

	ИначеЕсли Символ = """" И ПараметрыЧтения.ПредыдущийСимвол <> "\" Тогда

		Параметры.Тип = "Кавычка";

	КонецЕсли;
	
	Если ПараметрыЧтения.КавычкаОткрыта Тогда
		Возврат Параметры;
	КонецЕсли;

	Если Символ = ">" И ПараметрыЧтения.БлокЗамены Тогда // Завершение блока замены

		Параметры.Тип = "ОкончаниеБлокаПодстановки";
		Параметры.ЗаписатьВПоток = Ложь;
		Параметры.ФиксацияТекущейСтроки.Фиксировать = Истина;

	ИначеЕсли Символ = "," И ПараметрыЧтения.БлокЗамены Тогда

		Параметры.Тип = "РазделительПараметровБлока";
		Параметры.ЗаписатьВПоток = Ложь;
		Параметры.ФиксацияТекущейСтроки.Фиксировать = Истина;
		Параметры.ФиксацияТекущейСтроки.ПроверятьЗаполненность = Ложь;

	КонецЕсли;
	
	Возврат Параметры;

КонецФункции

Процедура ДобавитьЭлементТекстаШаблон(ДанныеТекстаШаблона, Элемент, ПараметрыЧтения)

	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		
		ДанныеТекстаШаблона.Добавить(Элемент);

	ИначеЕсли НЕ ПараметрыЧтения.БлокЗамены Тогда
		
		ДанныеТекстаШаблона.Добавить(Элемент);

	Иначе
		
		ДанныеТекстаШаблона.Добавить(СокрЛП(Элемент));

	КонецЕсли;

КонецПроцедуры

Функция РазобратьПараметрыПодстановки(Данные)

	Параметры = Новый Структура("Тип", ТипПодстановки.Неизвестный);
	КоличествоЭлементов = Данные.Количество();

	Если КоличествоЭлементов = 0 Тогда // Пустой блок подстановки - установка курсора

		Параметры.Тип = ТипПодстановки.УстановкаКурсора;
		Возврат Параметры;
		
	КонецЕсли;
	
	Параметры.Вставить("Подсказка", Данные[0]);
	
	Если КоличествоЭлементов = 1 Тогда

		Параметры.Тип = ТипПодстановки.УстановкаКурсора;
		Возврат Параметры;
		
	КонецЕсли;
	
	Тип = Данные[1];

	Если Тип = "ВыборВарианта" Тогда

		Параметры.Тип = ТипПодстановки.ВыборВарианта;

		Параметры.Вставить("СписокВыбора", Новый СписокЗначений());
		Для Инд = 2 По КоличествоЭлементов - 1 Цикл

			Параметры.СписокВыбора.Добавить(Данные[Инд + 1], Данные[Инд]);
			Инд = Инд + 1;

		КонецЦикла;

	ИначеЕсли Тип = "ДатаВремя" Тогда

		Параметры.Тип = ТипПодстановки.ДатаВремя;
		Формат = Данные[2];
		ПозРавно = СтрНайти(Формат, "=");

		Если ПозРавно Тогда
			ПозТчкЗпт = СтрНайти(Формат, ";", , ПозРавно);
			ПозТчкЗпт = ?(ПозТчкЗпт = 0, СтрДлина(Формат), ПозТчкЗпт);
			Формат = Сред(Формат, ПозРавно + 1, ПозТчкЗпт - ПозРавно - 1);
		КонецЕсли;

		Параметры.Вставить("Формат", Формат);

	Иначе

		Параметры.Тип = Тип;

	КонецЕсли;

	Возврат Параметры;

КонецФункции

Функция ОбработатьКавычкиПриЧтении(Знач Текст)
	
	Текст = СтрЗаменить(Текст, """""", """");
	
	Если Лев(Текст, 1) = """" Тогда
		
		Текст = Сред(Текст, 2, СтрДлина(Текст) - 1);
		
	КонецЕсли;
	
	Если Прав(Текст, 1) = """" Тогда
		
		Текст = Сред(Текст, 1, СтрДлина(Текст) - 1);
		
	КонецЕсли;
	
	Возврат Текст;

КонецФункции

// Запись

Процедура ЗаписатьГруппуШаблона(Данные, Запись)
	
	// запишем начало блока + количество дочерних элементов
	Запись.ЗаписатьСтроку(СтрШаблон(
	"{%1,", Данные.Элементы.Количество()));

	ЗаписатьЗаголовокГруппы(Данные, Запись); // Заголовок блока
	
	Для Индекс = 0 По Данные.Элементы.ВГраница() Цикл
		
		Элемент = Данные.Элементы[Индекс];
		
		Запись.ЗаписатьСтроку(",");
		
		Если Элемент.Тип = "Группа" Тогда
			
			ЗаписатьГруппуШаблона(Элемент, Запись);

		Иначе // Элемент
			
			ЗаписатьЭлементШаблона(Элемент, Запись);

		КонецЕсли;
		
	КонецЦикла;
	
	Запись.ЗаписатьСтроку("");
	Запись.Записать("}"); // Конец блока

КонецПроцедуры

Процедура ЗаписатьЗаголовокГруппы(ОписаниеГруппы, Запись)

	Запись.Записать(СтрШаблон("{""%1"",1,0,"""",""""}", ОписаниеГруппы.Наименование));

КонецПроцедуры

Процедура ЗаписатьЭлементШаблона(ОписаниеЭлемента, Запись)

	Запись.ЗаписатьСтроку("{0,");

	Если ОписаниеЭлемента.Свойство("ТекстЗаменыБазовый") И ЗначениеЗаполнено(ОписаниеЭлемента.ТекстЗаменыБазовый) Тогда
		ТекстЗамены = ОписаниеЭлемента.ТекстЗаменыБазовый;		
	ИначеЕсли СтрНайти(ОписаниеЭлемента.ТекстЗамены, "[") Тогда
		ТекстЗамены = ОписаниеЭлемента.ТекстЗамены;
	Иначе
		ТекстЗамены = СтрШаблон("%1[%2]", Лев(ОписаниеЭлемента.ТекстЗамены, 1), Сред(ОписаниеЭлемента.ТекстЗамены, 2));
	КонецЕсли;
	
	ТелоШаблон = СобратьТекстШаблона(ОписаниеЭлемента.Шаблон);
	
	Запись.Записать(СтрШаблон("{""%1"",0,0,""%2"",""%3""}", ОписаниеЭлемента.Наименование, ТекстЗамены, ТелоШаблон));
	
	Запись.ЗаписатьСтроку("");
	Запись.Записать("}");

КонецПроцедуры

Функция СобратьТекстШаблона(ДанныеШаблона)
	
	Если ТипЗнч(ДанныеШаблона) = Тип("Строка") Тогда
		
		Возврат ОбработатьКавычкиПриЗаписи(ДанныеШаблона);
		
	КонецЕсли;

	Вывод = Новый ЗаписьJSON();
	Вывод.УстановитьСтроку();

	Для Каждого Элемент Из ДанныеШаблона Цикл
		
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			Вывод.ЗаписатьБезОбработки(ОбработатьКавычкиПриЗаписи(Элемент));
			Продолжить;
		КонецЕсли;
		
		Вывод.ЗаписатьБезОбработки("<?");
		Если Элемент.Свойство("Подсказка") Тогда
			Вывод.ЗаписатьБезОбработки(СтрШаблон("""%1""", Элемент.Подсказка));
		КонецЕсли;

		Если Элемент.Тип = ТипПодстановки.ВыборВарианта Тогда
			
			Вывод.ЗаписатьБезОбработки(", ВыборВарианта");
			
			Для Каждого ЭлементВыбора Из Элемент.СписокВыбора Цикл
				
				Если ЗначениеЗаполнено(ЭлементВыбора.Представление) Тогда
					Вывод.ЗаписатьБезОбработки(", " + ЭлементВыбора.Представление);
				Иначе
					Вывод.ЗаписатьБезОбработки(", " + ЭлементВыбора.Значение);
				КонецЕсли;
				Вывод.ЗаписатьБезОбработки(", " + ЭлементВыбора.Значение);

			КонецЦикла;
			
		ИначеЕсли Элемент.Тип = ТипПодстановки.ДатаВремя Тогда

			Если Элемент.Свойство("Формат") Тогда
				Вывод.ЗаписатьБезОбработки(СтрШаблон(", ДатаВремя, """"ДФ=%1""""", Элемент.Формат));
			Иначе
				Вывод.ЗаписатьБезОбработки(", ДатаВремя");
			КонецЕсли;

		КонецЕсли;
		
		Вывод.ЗаписатьБезОбработки(">");
		
	КонецЦикла;

	Возврат Вывод.Закрыть();
	
КонецФункции

Функция ОбработатьКавычкиПриЗаписи(Текст)
	
	Текст = СтрЗаменить(Текст, """", """""");
	
	Возврат Текст;
	
КонецФункции
